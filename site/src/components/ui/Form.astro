---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;
---

<form id="myform" method="post">
  <input type="hidden" name="access_key" value="71914e1d-4816-402f-a291-891b369cac0f">
  <input type="hidden" name="subject" value="[XDYNAMIS] Nuevo mensaje de contacto">
  <input type="hidden" name="from_name" value="XDYNAMIS.com.ar">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', required = false }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required={ required? required : ''}
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

    <div id="hcaptcha-parent" class="">
      <div class="h-captcha mt-10 w-full flex justify-center" 
        data-captcha="true" 
        data-lang="es"
        data-size="invisible"
        data-callback="actualSubmit"
        data-sitekey="50b2fe65-b00b-4b9e-ad62-3ba471098be2"
        id="hcaptcha-container"
        />
    </div>
  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }
  <div id="result" class="mt-3 text-center"></div>
  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script is:inline src="https://js.hcaptcha.com/1/api.js" async defer></script>
<script is:inline>
  const SITE_KEY = '50b2fe65-b00b-4b9e-ad62-3ba471098be2';
  let submitting = false;

    function initForm() {
    const form = document.getElementById("myform");
    if (!form || form.dataset.initialized === 'true') return;
    
    form.dataset.initialized = 'true';
    
    form.addEventListener("submit", function (e) {
      e.preventDefault();
      
      if (submitting) return;
      
      const result = document.getElementById("result");
      const disclaimerCheck = document.getElementById("disclaimer");
      
      result.classList.remove("text-red-500");
      result.innerHTML = "";
      form.classList.add("was-validated");

      if (!form.checkValidity()) {
        form.querySelectorAll(":invalid")[0].focus();
        return;
      }

      if (!disclaimerCheck.checked) {
        disclaimerCheck.focus();
        result.classList.add("text-red-500");
        result.innerHTML = "Por favor, acepte los términos y condiciones.";
        return;
      }

      // Recreate captcha fresh on EVERY submit
      recreateAndExecuteCaptcha();
    });
  }

  function recreateAndExecuteCaptcha() {
    
    if (typeof hcaptcha === 'undefined') {
      console.error('hCaptcha not loaded');
      return;
    }
    
    const container = document.getElementById('hcaptcha-container');
    if (!container) return;
    
    // Completely clear and rebuild
    container.innerHTML = '';
    
    try {
      const widgetId = hcaptcha.render('hcaptcha-container', {
        'sitekey': SITE_KEY,
        'size': 'invisible',
        'callback': handleCaptchaSuccess,
        'error-callback': handleCaptchaError,
        'lang': 'es'
      });
      
      // Execute immediately after creation
      setTimeout(() => {
        hcaptcha.execute(widgetId);
      }, 100);
      
    } catch (error) {
      console.error('Error with captcha:', error);
    }
  }

  function handleCaptchaSuccess(token) {
    console.debug('Captcha success');
    submitForm(token);
  }

  function handleCaptchaError(error) {
    console.error('Captcha error:', error);
    submitting = false;
    const result = document.getElementById("result");
    result.classList.add("text-red-500");
    result.innerHTML = "Error con el captcha. Intente nuevamente.";
  }

  function submitForm(token) {
    if (submitting) return;
    submitting = true;
    
    const form = document.getElementById("myform");
    const result = document.getElementById("result");
    
    const formData = new FormData(form);
    formData.delete('g-recaptcha-response');
    formData.set('h-captcha-response', token);
    const object = Object.fromEntries(formData);
    delete object['g-recaptcha-response'];
    const json = JSON.stringify(object);

    result.innerHTML = "Enviando...";

    fetch("https://api.web3forms.com/submit", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      body: json,
    })
      .then(async (response) => {
        const data = await response.json();
        
        if (response.status == 200) {
          result.classList.add("text-green-500");
          result.innerHTML = 'Mensaje enviado con éxito.';
        } else {
          result.classList.add("text-red-500");
          result.innerHTML = 'Hubo un error al enviar el mensaje. Vuelva a intentar.';
          console.error('Error details:', data);
        }
      })
      .catch((error) => {
        console.error(error);
        result.classList.add("text-red-500");
        result.innerHTML = "Hubo un error.";
      })
      .then(function () {
        submitting = false;
        form.reset();
        form.classList.remove("was-validated");
        
        setTimeout(() => {
          result.classList.remove("text-red-500", "text-green-500");
          result.innerHTML = "";
        }, 5000);
      });
  }

  window.handleCaptchaSuccess = handleCaptchaSuccess;
  window.handleCaptchaError = handleCaptchaError;

  document.addEventListener("astro:page-load", () => {
    console.debug('Initializing form');
    initForm();
  });
</script>