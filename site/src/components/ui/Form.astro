---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;
---

<form id="myform" method="post">
  <input type="hidden" name="access_key" value="71914e1d-4816-402f-a291-891b369cac0f">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '', required = false }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required={ required? required : ''}
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

    <div class="h-captcha mt-10 w-full flex justify-center" 
      data-captcha="true" 
      data-lang="es"
      data-size="normal"
      />
  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }
  <div id="result" class="mt-3 text-center"></div>
  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script is:inline src="https://web3forms.com/client/script.js" async defer></script>
<script is:inline>

  document.addEventListener("astro:page-load", () => {
  
      const form = document.getElementById("myform");
      const result = document.getElementById("result");
      const disclaimerCheck = document.getElementById("disclaimer");

      form.addEventListener("submit", function (e) {
        e.preventDefault();
        result.classList.remove("text-red-500");
        result.classList.add("text-green-500");
        form.classList.add("was-validated");

        if (!form.checkValidity()) {
          form.querySelectorAll(":invalid")[0].focus();
          return;
        }

        if (!disclaimerCheck.checked) {
          disclaimerCheck.focus();
          result.classList.add("text-red-500");
          result.innerHTML = "Por favor, acepte los términos y condiciones.";
          return;
        }

        const hCaptcha = form.querySelector('textarea[name=h-captcha-response]').value;

        if (!hCaptcha) {
          e.preventDefault();
          result.classList.add("text-red-500");
          result.innerHTML = "Por favor, complete el captcha";
          return
        }

        const formData = new FormData(form);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify(object);

        result.innerHTML = "Enviando...";

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then(async (response) => {
            if (response.status == 200) {
              result.classList.add("text-green-500");
              result.innerHTML = 'Mensaje enviado con éxito.';
            } else {
              result.classList.add("text-red-500");
              result.innerHTML = 'Hubo un error al enviar el mensaje. Vuelva a intentar.';
            }
          })
          .catch((error) => {
            console.log(error);
            result.innerHTML = "Hubo un error.";
          })
          .then(function () {
            form.reset();
            form.classList.remove("was-validated");
            setTimeout(() => {
              result.classList.remove("text-red-500");
              result.classList.remove("text-green-500");
              result.innerHTML = "";
            }, 5000);
          });
      });
    },
    { once: true },
  );
</script>